{"ast":null,"code":"import React, { useEffect, useRef } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\nimport logoInnosoft from \"../assets/logo-innosoft.png\";\nimport Home from \"./Home\";\nexport default function SplashScreen() {\n  var edges = useSafeAreaInsets();\n  var startAnimation = useRef(new Animated.Value(0)).current;\n  var scaleLogo = useRef(new Animated.Value(1)).current;\n  var scaleTitle = useRef(new Animated.Value(1)).current;\n  var moveLogo = useRef(new Animated.ValueXY({\n    x: 0,\n    y: 0\n  })).current;\n  var moveTitle = useRef(new Animated.ValueXY({\n    x: 0,\n    y: 0\n  })).current;\n  var contentTransition = useRef(new Animated.Value(Dimensions.get('window').height)).current;\n  useEffect(function () {\n    setTimeout(function () {\n      Animated.parallel([Animated.timing(startAnimation, {\n        toValue: -Dimensions.get('window').height + (edges.top + 65),\n        useNativeDriver: true\n      }), Animated.timing(scaleLogo, {\n        toValue: 0.3,\n        useNativeDriver: true\n      }), Animated.timing(scaleTitle, {\n        toValue: 0.8,\n        useNativeDriver: true\n      }), Animated.timing(moveLogo, {\n        toValue: {\n          x: Dimensions.get(\"window\").width / 2 - 35,\n          y: Dimensions.get('window').height / 2 - 5\n        },\n        useNativeDriver: true\n      }), Animated.timing(moveTitle, {\n        toValue: {\n          x: 0,\n          y: Dimensions.get('window').height / 2 - 90\n        },\n        useNativeDriver: true\n      }), Animated.timing(contentTransition, {\n        toValue: 0,\n        useNativeDriver: true\n      })]).start();\n    }, 500);\n  }, []);\n  return React.createElement(View, {\n    style: {\n      position: 'absolute',\n      top: 0,\n      bottom: 0,\n      left: 0,\n      right: 0\n    }\n  }, React.createElement(Animated.View, {\n    style: {\n      flex: 1,\n      backgroundColor: 'white',\n      zIndex: 1,\n      transform: [{\n        translateY: startAnimation\n      }]\n    }\n  }, React.createElement(Animated.View, {\n    style: {\n      flex: 1,\n      alignItems: 'center',\n      justifyContent: 'center'\n    }\n  }, React.createElement(Animated.Image, {\n    source: logoInnosoft,\n    style: {\n      width: 100,\n      height: 100,\n      marginBottom: 20,\n      transform: [{\n        translateX: moveLogo.x\n      }, {\n        translateY: moveLogo.y\n      }, {\n        scale: scaleLogo\n      }]\n    }\n  }), React.createElement(Animated.Text, {\n    style: {\n      fontSize: 25,\n      fontWeight: 'bold',\n      color: 'white',\n      transform: [{\n        translateY: moveTitle.y\n      }, {\n        scale: scaleTitle\n      }]\n    }\n  }, \"Chatty\"))), React.createElement(Animated.View, {\n    style: {\n      position: 'absolute',\n      top: 0,\n      bottom: 0,\n      left: 0,\n      right: 0,\n      backgroundColor: 'rgba(0,0,0,0.04)',\n      zIndex: 0,\n      transform: [{\n        translateY: contentTransition\n      }]\n    }\n  }, React.createElement(Home, null)));\n}","map":{"version":3,"sources":["C:/Users/jesus/Desktop/USbicate/components/splashScreen.js"],"names":["React","useEffect","useRef","useSafeAreaInsets","logoInnosoft","Home","SplashScreen","edges","startAnimation","Animated","Value","current","scaleLogo","scaleTitle","moveLogo","ValueXY","x","y","moveTitle","contentTransition","Dimensions","get","height","setTimeout","parallel","timing","toValue","top","useNativeDriver","width","start","position","bottom","left","right","flex","backgroundColor","zIndex","transform","translateY","alignItems","justifyContent","marginBottom","translateX","scale","fontSize","fontWeight","color"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef } from 'react'\r\nimport { Animated, Dimensions, View } from \"react-native\";\r\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\r\n\r\nimport logoInnosoft from \"../assets/logo-innosoft.png\"\r\nimport Home from './Home';\r\n\r\n\r\nexport default function SplashScreen() {\r\n\r\n    // SafeArea Value...\r\n    const edges = useSafeAreaInsets();\r\n\r\n    // Animation Values....\r\n    const startAnimation = useRef(new Animated.Value(0)).current;\r\n\r\n    // Scaling Down Both logo and Title...\r\n    const scaleLogo = useRef(new Animated.Value(1)).current;\r\n    const scaleTitle = useRef(new Animated.Value(1)).current;\r\n\r\n    // Offset Animation....\r\n    const moveLogo = useRef(new Animated.ValueXY({ x: 0, y: 0 })).current;\r\n    const moveTitle = useRef(new Animated.ValueXY({ x: 0, y: 0 })).current;\r\n\r\n    // Animating COntent...\r\n    const contentTransition = useRef(new Animated.Value(Dimensions.get('window').height)).current;\r\n\r\n    // Animation Done....\r\n    useEffect(() => {\r\n\r\n        // Starting Animation after 500ms....\r\n        setTimeout(() => {\r\n\r\n            // Parallel Animation...\r\n            Animated.parallel([\r\n                Animated.timing(\r\n                    startAnimation,\r\n                    {\r\n                        // For same Height for non safe Area Devices...\r\n                        toValue: -Dimensions.get('window').height + (edges.top + 65),\r\n                        useNativeDriver: true\r\n                    }\r\n                ),\r\n                Animated.timing(\r\n                    scaleLogo,\r\n                    {\r\n                        // Scaling to 0.35\r\n                        toValue: 0.3,\r\n                        useNativeDriver: true\r\n                    }\r\n                ),\r\n                Animated.timing(\r\n                    scaleTitle,\r\n                    {\r\n                        // Scaling to 0.8\r\n                        toValue: 0.8,\r\n                        useNativeDriver: true\r\n                    }\r\n                ),\r\n                Animated.timing(\r\n                    moveLogo,\r\n                    {\r\n                        // Moving to Right Most...\r\n                        toValue: {\r\n                            x: (Dimensions.get(\"window\").width / 2) - 35,\r\n                            y: (Dimensions.get('window').height / 2) - 5\r\n                        },\r\n                        useNativeDriver: true\r\n                    }\r\n                ),\r\n                Animated.timing(\r\n                    moveTitle,\r\n                    {\r\n                        // Moving to Right Most...\r\n                        toValue: {\r\n                            x: 0,\r\n                            // Since image size is 100...\r\n                            y: (Dimensions.get('window').height / 2) - 90\r\n                        },\r\n                        useNativeDriver: true\r\n                    }\r\n                ),\r\n                Animated.timing(\r\n                    contentTransition,\r\n                    {\r\n                        toValue: 0,\r\n                        useNativeDriver: true\r\n                    }\r\n                )\r\n            ])\r\n                .start();\r\n\r\n        }, 500);\r\n\r\n    }, [])\r\n\r\n    // Going to Move Up like Nav Bar...\r\n    return (\r\n\r\n        <View style={{\r\n            position: 'absolute',\r\n            top: 0,\r\n            bottom: 0,\r\n            left: 0,\r\n            right: 0,\r\n        }}>\r\n            <Animated.View style={{\r\n                flex: 1,\r\n                backgroundColor: 'white',\r\n                zIndex: 1,\r\n                transform: [\r\n                    { translateY: startAnimation }\r\n                ]\r\n            }}>\r\n\r\n                <Animated.View style={{\r\n                    flex: 1,\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center',\r\n                }}>\r\n                    <Animated.Image source={logoInnosoft} style={{\r\n                        width: 100,\r\n                        height: 100,\r\n                        marginBottom: 20,\r\n                        transform: [\r\n                            { translateX: moveLogo.x },\r\n                            { translateY: moveLogo.y },\r\n                            { scale: scaleLogo },\r\n\r\n                        ]\r\n                    }}></Animated.Image>\r\n\r\n                    <Animated.Text style={{\r\n                        fontSize: 25,\r\n                        fontWeight: 'bold',\r\n                        color: 'white',\r\n                        transform: [\r\n                            { translateY: moveTitle.y },\r\n                            { scale: scaleTitle }\r\n                        ]\r\n                    }}>Chatty</Animated.Text>\r\n\r\n                </Animated.View>\r\n\r\n            </Animated.View>\r\n\r\n            <Animated.View style={{\r\n                position: 'absolute',\r\n                top: 0,\r\n                bottom: 0,\r\n                left: 0,\r\n                right: 0,\r\n                backgroundColor: 'rgba(0,0,0,0.04)',\r\n                zIndex: 0,\r\n                transform: [\r\n                    { translateY: contentTransition }\r\n                ]\r\n            }}>\r\n\r\n                <Home></Home>\r\n\r\n            </Animated.View>\r\n\r\n        </View>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}